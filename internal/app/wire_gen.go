// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"evaframe/internal/dao/gorm"
	"evaframe/internal/handler"
	"evaframe/internal/service"
	"evaframe/pkg/config"
	"evaframe/pkg/database"
	"evaframe/pkg/jwt"
	"evaframe/pkg/logger"
	"evaframe/pkg/middleware"
	"evaframe/pkg/validator"
)

// Injectors from wire.go:

// InitializeApp 使用Wire进行依赖注入
func InitializeApp(configPath string) (*Application, func(), error) {
	config, err := NewConfigWithPath(configPath)
	if err != nil {
		return nil, nil, err
	}
	db, err := database.NewDB(config)
	if err != nil {
		return nil, nil, err
	}
	userDAO := gorm.NewUserDAO(db)
	jwtJWT := jwt.NewJWT(config)
	validatorValidator := validator.NewValidator()
	loggerLogger, err := logger.NewLogger(config)
	if err != nil {
		return nil, nil, err
	}
	userService := service.NewUserService(userDAO, jwtJWT, validatorValidator, loggerLogger, config)
	userHandler := handler.NewUserHandler(userService, validatorValidator, loggerLogger)
	handlerFunc := middleware.Logger(loggerLogger)
	application := NewApplication(config, userHandler, jwtJWT, loggerLogger, handlerFunc)
	return application, func() {
	}, nil
}

// wire.go:

// NewConfigWithPath 创建一个包装函数来接收configPath参数
func NewConfigWithPath(configPath string) (*config.Config, error) {
	return config.NewConfig(configPath)
}
